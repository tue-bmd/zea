[project]
name = "zea"
version = "2.4.0"
description = "A Toolbox for Cognitive Ultrasound Imaging. Provides a set of tools for processing of ultrasound data, all built in your favorite machine learning framework."
authors = [
    { name = "Tristan Stevens", email = "t.s.w.stevens@tue.nl" },
    { name = "Wessel van Nierop", email = "w.l.v.nierop@tue.nl" },
    { name = "Ben Luijten", email = "w.m.b.luijten@tue.nl" },
    { name = "Vincent van de Schaft", email = "v.v.d.schaft@tue.nl" },
    { name = "OisÃ­n Nolan", email = "o.i.nolan@tue.nl" },
    { name = "Beatrice Federici", email = "b.federici@tue.nl" },
    { name = "Louis van Harten", email = "l.d.v.harten@tue.nl" },
    { name = "Simon Penninga", email = "s.w.penninga@tue.nl" },
    { name = "Noortje Schueler", email = "n.i.p.schueler@tue.nl" },
    { name = "Ruud van Sloun", email = "r.j.g.v.sloun@tue.nl" },
]
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.10,<3.13"
keywords = ["ultrasound", "machine learning", "beamforming"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "keras >=3.9",
    "h5py >=3.11",
    "numpy >= 1.24, <2.0",
    "matplotlib >=3.8",
    "scipy >=1.13",
    "pillow >=10",
    "schema >=0.7",
    "tqdm >=4",
    "pyyaml >=6",
    "decorator >=5",
    "huggingface_hub >=0.26",
    "wandb >=0.18",
    "wget >=3.2",
    # can we make these optional or remove?
    "pydicom >=2.4",
    "scikit-image >=0.23",
    "scikit-learn >=1.4",
]
[project.optional-dependencies]
dev = [
    # tests
    "pytest>=8.1",
    "pylint>=3.1",
    "papermill>=2.4",
    "ipykernel>=6.29.5",
    "cloudpickle>=3.1.1",
    "ipywidgets",
    "pre-commit",
    "ruff",
    # docs
    "sphinx",
    "sphinx-autobuild",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "mock",
    "myst-parser",
    "nbsphinx",
    "furo",
    "PyStemmer",
    # display
    "opencv-python-headless>=4",
]

tests = [
    "pytest>=8.1",
    "papermill>=2.4",
    "ipykernel>=6.29.5",
    "cloudpickle>=3.1.1",
    "ipywidgets",
    "pre-commit",
    "ruff",
]
docs = [
    "sphinx",
    "sphinx-autobuild",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "mock",
    "myst-parser",
    "nbsphinx",
    "furo",
    "PyStemmer",
]
jax = [
    "jax[cuda12_pip]>=0.4.26"
]
display = [
    "opencv-python>=4",
]
display-headless = [
    "opencv-python-headless>=4",
]

[project.urls]
Homepage = "https://github.com/tue-bmd/ultrasound-toolbox/"
Repository = "https://github.com/tue-bmd/ultrasound-toolbox/"

[project.scripts]
zea = "zea.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# To update the poetry.lock file run `sudo /opt/poetry-venv/bin/python3 -m poetry lock` inside the zea container (where poetry is installed)
# Otherwise a simple `poetry lock` will suffice.
# Rebuild docker image afterwards to match the lock file!

[tool.ruff]
# We use ruff to lint and auto-format code

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "*.ipynb",  # ignore jupyter notebooks completely for now
]

# more lenient line width than Black
line-length = 100
indent-width = 4

# minimum target python version
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]

"__init__.py" = [
    "F401",  # unused imports
]

"tests/**/__init__.py" = [
    "F403",  # * imports
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
