name: CI Pipeline

on:
  pull_request:
  push:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear GitHub Actions cache'
        type: boolean
        default: false

permissions:
  actions: write
  contents: read

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: usbmd

jobs:
  clear-cache:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.clear_cache }}
    runs-on: ubuntu-latest
    steps:
      - name: Clear cache
        uses: actions/github-script@v6
        with:
          script: |
            console.log("About to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              console.log(cache)
              github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
            console.log("Clear completed")

  set-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set.outputs.tag }}
    steps:
      - name: Set image tag
        id: set
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

          # Print out the tag we just set for debugging
          TAG_VALUE=$(grep '^tag=' "$GITHUB_OUTPUT" | cut -d'=' -f2-)
          echo "Determined image tag: $TAG_VALUE"

  build-full-image:
    needs: set-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push full Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/all:${{ needs.set-tag.outputs.docker_tag }}
          build-args: BACKEND=all
          cache-from: type=registry,ref=usbmd/all:cache
          cache-to: type=registry,ref=usbmd/all:cache,mode=max

  build-other-images:
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [tensorflow, torch, jax, numpy]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}:${{ needs.set-tag.outputs.docker_tag }}
          build-args: BACKEND=${{ matrix.backend }}
          cache-from: type=registry,ref=usbmd/${{ matrix.backend }}:cache
          cache-to: type=registry,ref=usbmd/${{ matrix.backend }}:cache,mode=max

  pylint:
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: |
          if [ -z "${{ needs.set-tag.outputs.docker_tag }}" ]; then
            echo "Image tag not set!" && exit 1
          fi
          docker pull usbmd/all:${{ needs.set-tag.outputs.docker_tag }}

      - name: Run Pylint in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            usbmd/all:${{ needs.set-tag.outputs.docker_tag }} \
            sh -c "pip install -e . && poetry run pylint \$(git ls-files '*.py') -j 0"

  tests:
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: |
          if [ -z "${{ needs.set-tag.outputs.docker_tag }}" ]; then
            echo "Image tag not set!" && exit 1
          fi
          docker pull usbmd/all:${{ needs.set-tag.outputs.docker_tag }}

      - name: Run Pytest in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            usbmd/all:${{ needs.set-tag.outputs.docker_tag }} \
            sh -c "pip install -e . && pytest -p no:cacheprovider ./tests"