name: CI Pipeline

on:
  pull_request:
  push:
    branches:
      - main
      - develop
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: usbmd

jobs:
  set-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set.outputs.tag }}
    steps:
      - name: Set image tag
        id: set
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

          # Print out the tag we just set for debugging
          TAG_VALUE=$(grep '^tag=' "$GITHUB_OUTPUT" | cut -d'=' -f2-)
          echo "Determined image tag: $TAG_VALUE"

  # Template for image build jobs
  build-image-template: &build-image-template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.IMAGE_NAME }}:${{ needs.set-tag.outputs.docker_tag }}
          build-args: BACKEND=${{ env.BACKEND }}
          cache-from: type=registry,ref=usbmd/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=usbmd/${{ env.IMAGE_NAME }}:cache,mode=max

  build-full-image:
    needs: set-tag
    env:
      IMAGE_NAME: all
      BACKEND: all
    <<: *build-image-template

  build-numpy-image:
    needs: [build-full-image, set-tag]
    env:
      IMAGE_NAME: numpy
      BACKEND: numpy
    <<: *build-image-template

  build-tensorflow-image:
    needs: [build-full-image, set-tag]
    env:
      IMAGE_NAME: tensorflow
      BACKEND: tensorflow
    <<: *build-image-template

  build-torch-image:
    needs: [build-full-image, set-tag]
    env:
      IMAGE_NAME: torch
      BACKEND: torch
    <<: *build-image-template

  build-jax-image:
    needs: [build-full-image, set-tag]
    env:
      IMAGE_NAME: jax
      BACKEND: jax
    <<: *build-image-template

  pylint:
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: |
          if [ -z "${{ needs.set-tag.outputs.docker_tag }}" ]; then
            echo "Image tag not set!" && exit 1
          fi
          docker pull usbmd/all:${{ needs.set-tag.outputs.docker_tag }}

      - name: Run Pylint in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            usbmd/all:${{ needs.set-tag.outputs.docker_tag }} \
            sh -c "pip install -e . && poetry run pylint \$(git ls-files '*.py') -j 0"

  tests:
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: |
          if [ -z "${{ needs.set-tag.outputs.docker_tag }}" ]; then
            echo "Image tag not set!" && exit 1
          fi
          docker pull usbmd/all:${{ needs.set-tag.outputs.docker_tag }}

      - name: Run Pytest in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            usbmd/all:${{ needs.set-tag.outputs.docker_tag }} \
            sh -c "pip install -e . && pytest -p no:cacheprovider ./tests"
