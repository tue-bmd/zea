name: CI Pipeline

on:
  pull_request:
  push:
    branches:
      - main
      - develop

jobs:
  build-full-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push full Docker image (all)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: usbmd/all:latest
          build-args: |
            BACKEND=all
          cache-from: type=registry,ref=usbmd/all:cache
          cache-to: type=registry,ref=usbmd/all:cache,mode=max

  build-other-images:
    needs: build-full-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (tensorflow)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: usbmd/tensorflow:latest
          build-args: |
            BACKEND=tensorflow
          cache-from: type=registry,ref=usbmd/all:cache
          cache-to: type=registry,ref=usbmd/all:cache,mode=max

      - name: Build and push Docker image (torch)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: usbmd/torch:latest
          build-args: |
            BACKEND=torch
          cache-from: type=registry,ref=usbmd/all:cache
          cache-to: type=registry,ref=usbmd/all:cache,mode=max

      - name: Build and push Docker image (jax)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: usbmd/jax:latest
          build-args: |
            BACKEND=jax
          cache-from: type=registry,ref=usbmd/all:cache
          cache-to: type=registry,ref=usbmd/all:cache,mode=max

      - name: Build and push Docker image (base)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: usbmd/base:latest
          build-args: |
            BACKEND=numpy
          cache-from: type=registry,ref=usbmd/all:cache
          cache-to: type=registry,ref=usbmd/all:cache,mode=max

  pylint:
    needs: build-full-image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: docker pull usbmd/all:latest

      - name: Run Pylint in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            usbmd/all:latest \
            sh -c "pip install -e . && poetry run pylint \$(git ls-files '*.py') -j 0"

  tests:
    needs: build-full-image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: docker pull usbmd/all:latest

      - name: Run Pytest in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            usbmd/all:latest \
            sh -c "pip install -e . && pytest -p no:cacheprovider ./tests"
