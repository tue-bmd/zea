name: CI Pipeline

on:
  pull_request:
  push:
    branches:
      - main
      - develop
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: zeahub

jobs:
  set-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set.outputs.tag }}
    steps:
      - name: Set image tag
        id: set
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

          # Print out the tag we just set for debugging
          TAG_VALUE=$(grep '^tag=' "$GITHUB_OUTPUT" | cut -d'=' -f2-)
          echo "Determined image tag: $TAG_VALUE"

  build-full-image:
    needs: set-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_ZEA }}
          password: ${{ secrets.DOCKERHUB_TOKEN_ZEA }}

      - name: Build and push all-cpu Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          target: cpu
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/all-cpu:${{ needs.set-tag.outputs.docker_tag }}
          build-args: BACKEND=all
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}/all-cpu:cache
          cache-to: type=registry,ref=${{ env.IMAGE_PREFIX }}/all-cpu:cache,mode=max

  build-other-images:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [numpy, jax, torch, tensorflow, all]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_ZEA }}
          password: ${{ secrets.DOCKERHUB_TOKEN_ZEA }}

      - name: Build and push CPU Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          target: cpu
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}-cpu:${{ needs.set-tag.outputs.docker_tag }}
          build-args: BACKEND=${{ matrix.backend }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}-cpu:cache
          cache-to: type=registry,ref=${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}-cpu:cache,mode=max

      - name: Build and push GPU Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.base
          target: gpu
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}:${{ needs.set-tag.outputs.docker_tag }}
          build-args: BACKEND=${{ matrix.backend }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE_PREFIX }}/${{ matrix.backend }}:cache,mode=max

  tests:
    if: github.event_name == 'pull_request'
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: |
          if [ -z "${{ needs.set-tag.outputs.docker_tag }}" ]; then
            echo "Image tag not set!" && exit 1
          fi
          docker pull ${{ env.IMAGE_PREFIX }}/all-cpu:${{ needs.set-tag.outputs.docker_tag }}

      - name: Run Pytest in container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            ${{ env.IMAGE_PREFIX }}/all-cpu:${{ needs.set-tag.outputs.docker_tag }} \
            sh -c "pip install -e . && pytest -p no:cacheprovider -m 'not heavy' ./tests"

      - name: Run heavy Pytest (allowed to fail)
        continue-on-error: true
        run: |
          docker run --rm \
          -v "${{ github.workspace }}:/ultrasound-toolbox" \
          -w /ultrasound-toolbox \
          -u $(id -u):$(id -g) \
          -e HOME=/tmp \
          -e USER=$(id -un) \
          -e LOGNAME=$(id -un) \
          ${{ env.IMAGE_PREFIX }}/all-cpu:${{ needs.set-tag.outputs.docker_tag }} \
          sh -c "pip install -e . && pytest -p no:cacheprovider -m 'heavy' ./tests"


  linter:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Ruff
        run: |
          pip install -U pip setuptools wheel
          pip install ruff
      - name: Run Linter
        run: ruff check --config pyproject.toml --verbose

      - name: Run Formatter
        run: ruff format --config pyproject.toml --check --verbose


  build-docs:
    needs: [build-full-image, set-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global safe.directory $GITHUB_WORKSPACE

      - name: Pull full Docker image
        run: |
          if [ -z "${{ needs.set-tag.outputs.docker_tag }}" ]; then
            echo "Image tag not set!" && exit 1
          fi
          docker pull ${{ env.IMAGE_PREFIX }}/all-cpu:${{ needs.set-tag.outputs.docker_tag }}

      - name: Build documentation with Sphinx (fail on warnings)
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/ultrasound-toolbox" \
            -w /ultrasound-toolbox/docs \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            -e USER=$(id -un) \
            -e LOGNAME=$(id -un) \
            ${{ env.IMAGE_PREFIX }}/all-cpu:${{ needs.set-tag.outputs.docker_tag }} \
            sh -c "\
              sudo apt-get update && \
              sudo apt-get install -y pandoc && \
              pip install -e ..[docs] && \
              export PATH=\"/tmp/.local/bin:\$PATH\" && \
              make docs-clean && \
              make docs-build SPHINXOPTS='-W --keep-going' \
            "

  paper:
    name: Paper Preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: openjournals/openjournals-draft-action@master
        with:
          journal: joss
          # This should be the path to the paper within your repo.
          paper-path: paper/paper.md
      - uses: actions/upload-artifact@v4
        with:
          name: paper
          # This is the output path where Pandoc will write the compiled
          # PDF. Note, this should be the same directory as the input
          # paper.md
          path: paper/paper.pdf
