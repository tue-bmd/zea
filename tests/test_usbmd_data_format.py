"""Test generating and validating usbmd data format.
"""
import os
from pathlib import Path

import numpy as np
import pytest

n_frames = 2
n_tx = 4
n_el = 16
n_ax = 128
n_ch = 1

dataset_parameters = {
    "path": "temp//test_dataset.hdf5",
    "raw_data": np.zeros((n_tx, n_tx, n_ax, n_el, n_ch), dtype=np.float32),
    "probe_geometry": np.zeros((n_el, 3), dtype=np.float32),
    "sampling_frequency": 30e6,
    "center_frequency": 6e6,
    "initial_times": np.zeros((n_tx), dtype=np.float32),
    "t0_delays": np.zeros((n_tx, n_el), dtype=np.float32),
    "sound_speed": 1540.0,
    "probe_name": "test_probe",
    "description": "Dataset parameters for testing",
    "focus_distances": np.zeros((n_tx,), dtype=np.float32),
    "polar_angles": np.linspace(-np.pi / 2, np.pi / 2, n_tx, dtype=np.float32),
    "azimuth_angles": np.zeros((n_tx), np.float32),
    "tx_apodizations": np.ones((n_tx, n_el), dtype=np.float32),
    "bandwidth_percent": 200.0,
}

from usbmd.data_format.usbmd_data_format import (
    generate_example_dataset,
    generate_usbmd_dataset,
    validate_dataset,
)


def test_example_dataset():
    """Tests the generate_example_dataset function by calling it and then
    validating it using the validate_dataset function.
    """
    # Define path to store the example dataset
    path = Path("temp", "test_case_dataset.hdf5")

    # Create the directory if it does not exist
    path.parent.mkdir(parents=True, exist_ok=True)

    # Generate the example dataset
    generate_example_dataset(path)

    try:
        # Validate the dataset
        validate_dataset(path)
    finally:
        # Remove the file generated by this test
        os.remove(path)


def test_generate_dataset():
    """Tests the generate_usbmd_dataset function by calling it on a valid set
    of parameters and then validating it using the validate_dataset function.
    """
    try:
        generate_usbmd_dataset(**dataset_parameters)
    finally:
        if Path(dataset_parameters["path"]).exists() and False:
            os.remove(dataset_parameters["path"])


@pytest.mark.parametrize(
    "key",
    [
        "description",
        "focus_distances",
        "polar_angles",
        "azimuth_angles",
        "tx_apodizations",
        "bandwidth_percent",
    ],
)
def test_omit_key(key):
    """Tests if omitting an optional key in the dataset_parameters dictionary
    does not raise an error.

    Args:
        key (str): The key to omit from the dataset_parameters dictionary.
    """
    reduced_parameters = dataset_parameters.copy()
    reduced_parameters.pop(key)
    try:
        generate_usbmd_dataset(**dataset_parameters)
    finally:
        if Path(dataset_parameters["path"]).exists():
            os.remove(dataset_parameters["path"])


@pytest.mark.parametrize(
    "key",
    [
        "raw_data",
        "probe_geometry",
        "sampling_frequency",
        "center_frequency",
        "initial_times",
        "t0_delays",
        "sound_speed",
        "probe_name",
        "description",
        "focus_distances",
        "polar_angles",
        "azimuth_angles",
        "tx_apodizations",
        "bandwidth_percent",
    ],
)
def test_wrong_shape(key):
    """Tests if passing a parameter with the wrong shape raises an error.

    Args:
        key (str): The key to change in the dataset_parameters dictionary.
    """
    wrong_parameters = dataset_parameters.copy()
    wrong_parameters[key] = np.zeros((n_tx + 7, n_el + 1), dtype=np.float32)
    try:
        with pytest.raises(AssertionError):
            generate_usbmd_dataset(**wrong_parameters)
    finally:
        if Path(dataset_parameters["path"]).exists():
            os.remove(dataset_parameters["path"])


def test_existing_path():
    """Tests if passing a path that already exists raises an error."""
    # Create a file with the same name
    Path(dataset_parameters["path"]).touch()
    try:
        with pytest.raises(FileExistsError):
            generate_usbmd_dataset(**dataset_parameters)
    finally:
        if Path(dataset_parameters["path"]).exists():
            os.remove(dataset_parameters["path"])
