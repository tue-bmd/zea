"""Tests for the read_h5 module."""

import os
from pathlib import Path

import h5py
import numpy as np

from usbmd.data.read_h5 import (
    ReadH5,
    print_hdf5_attrs,
    recursively_load_dict_contents_from_group,
)


def test_readh5_class():
    """Test creating and opening an h5 file"""

    # Define path to store the example dataset
    path = Path("temp", "dummy_dataset.hdf5")

    # Create the directory if it does not exist
    path.parent.mkdir(parents=True, exist_ok=True)

    try:
        # Create the file
        # TODO: add more test data to the file
        with h5py.File(path, "w") as dataset:
            dataset.attrs["dummy_attr"] = "dummy_value"
            dataset.attrs["dummy_attr2"] = "dummy_value2"
            dataset.attrs["dummy_attr3"] = ["dummy_value3"]

        # Open the file
        h5_reader = ReadH5(path)
        file = h5_reader.open()
        assert file.attrs["dummy_attr"] == "dummy_value"

        # Get length of file
        assert len(h5_reader) == 0

        # Close the file
        h5_reader.close()

        # Add dataset to file
        with h5py.File(path, "w") as dataset:
            dataset.create_dataset("dummy_dataset", data=np.random.randn(10, 20))
            dataset.create_dataset("dummy_dataset2", data=np.arange(5))

        # Reload the file
        file = h5_reader.open()

        # Get length of file again
        assert len(h5_reader) == 10

        # Get shape of file
        assert h5_reader.shape == (10, 20)

        # Get largest group name
        assert h5_reader.get_largest_group_name() == "dummy_dataset"

        # Get keys in file
        assert list(h5_reader.keys()) == ["dummy_dataset", "dummy_dataset2"]

        # Get extension
        assert h5_reader.get_extension() == ".hdf5"

        # Print hdf5 attributes
        # TODO: not really testing the output but rather whether it runs
        print_hdf5_attrs(file)

        # Recursively load dict contents from group
        dict_contents = recursively_load_dict_contents_from_group(file, "/")
        assert list(dict_contents.keys()) == ["dummy_dataset", "dummy_dataset2"]
        assert dict_contents["dummy_dataset"].shape == (10, 20)
        assert dict_contents["dummy_dataset2"].shape == (5,)
        assert (dict_contents["dummy_dataset2"] != np.arange(5)).sum() == 0

        # Close file
        h5_reader.close()
    finally:
        # Remove the file generated by this test
        os.remove(path)


if __name__ == "__main__":
    test_readh5_class()
