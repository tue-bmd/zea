# base image
FROM ubuntu:22.04

# Do not prompt for input when installing packages
ARG DEBIAN_FRONTEND=noninteractive

# Prevent python from writing pyc files
ENV PYTHONDONTWRITEBYTECODE=1

# Set pip cache directory
ENV PIP_CACHE_DIR=/tmp/pip_cache

# Set poetry version and venv path
ENV POETRY_VERSION=1.8.3 \
    POETRY_VENV=/opt/poetry-venv \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=0 \
    POETRY_VIRTUALENVS_CREATE=0 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Add non-root users
ARG BASE_UID=1000
ARG NUM_USERS=51

# Create non-root users and install system packages in one command
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 python3-pip git python3-tk python3-venv \
        libsm6 libxext6 libxrender-dev libqt5gui5 sudo \
        ffmpeg imagemagick && \
    python3 -m pip install --no-cache-dir --upgrade pip setuptools && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    for i in $(seq 0 $NUM_USERS); do \
        USER_UID=$((BASE_UID + i)); \
        USERNAME="devcontainer$i"; \
        groupadd --gid $USER_UID $USERNAME && \
        useradd --uid $USER_UID --gid $USER_UID -m --shell /bin/bash $USERNAME && \
        echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME; \
        echo "export PATH=\$PATH:/home/$USERNAME/.local/bin" >> /home/$USERNAME/.bashrc; \
    done

# Install poetry once system dependencies are in place
RUN python3 -m venv $POETRY_VENV && \
    $POETRY_VENV/bin/pip install --no-cache-dir poetry==${POETRY_VERSION}
ENV PATH="${PATH}:${POETRY_VENV}/bin"

# Set working directory and copy poetry configuration
WORKDIR /ultrasound-toolbox
COPY pyproject.toml poetry.lock ./

# Install dependencies for usbmd (with headless opencv)
RUN --mount=type=cache,target=$POETRY_CACHE_DIR \
    poetry install -E opencv-python-headless --no-root --compile

# Set the default backend; override this when building if desired.
ARG BACKEND=all

RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "tensorflow" ]; then \
    echo "Installing tensorflow..."; \
    KERAS_VERSION=$(pip show keras | grep '^Version:' | awk '{print $2}') && \
    pip install --extra-index-url https://pypi.nvidia.com tensorflow[and-cuda]==2.15.0 && \
    # Reinstall Keras after tf to ensure its version 3.x
    pip install --upgrade "keras==$KERAS_VERSION" keras-cv; \
    fi

RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "jax" ]; then \
    echo "Installing jax..."; \
    pip install --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html jax[cuda12_pip]==0.4.26; \
    fi

RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "torch" ]; then \
    echo "Installing torch..."; \
    pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.2.2+cu121 torchvision torchmetrics; \
    fi

RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "all" ]; then \
    KERAS_VERSION=$(pip show keras | grep '^Version:' | awk '{print $2}') && \
    pip install --extra-index-url https://pypi.nvidia.com tensorflow[and-cuda]==2.15.0 && \
    # Reinstall Keras after tf to ensure its version 3.x
    pip install --upgrade "keras==$KERAS_VERSION" keras-cv && \
    pip install --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html jax[cuda12_pip]==0.4.26 && \
    pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.2.2+cu121 torchvision torchmetrics; \
    fi