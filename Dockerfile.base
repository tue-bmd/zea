# syntax=docker/dockerfile:1

# -----------------------
# Builder: install deps
# -----------------------
FROM python:3.10-bullseye AS builder
ARG BACKEND=all
ENV PIP_CACHE_DIR=/root/.cache/pip

# 1. System dependencies & Poetry
RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential git && \
    pip install --no-cache-dir poetry==1.8.3 && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY pyproject.toml poetry.lock ./

# Install project dependencies into a Poetry venv at /app/.venv
RUN poetry install --no-root --without dev && \
    rm -rf $PIP_CACHE_DIR

# -----------------------
# 2. Backend-specific installs
#    (cumulative layers for 'all')
# -----------------------

# numpy
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "numpy" ] || [ "$BACKEND" = "all" ]; then \
      poetry run pip install --no-cache-dir numpy; \
    fi

# jax
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "jax" ] || [ "$BACKEND" = "all" ]; then \
      poetry run pip install --no-cache-dir jax jaxlib[cuda12_pip] \
        -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html; \
    fi

# torch
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "torch" ] || [ "$BACKEND" = "all" ]; then \
      poetry run pip install --no-cache-dir torch==2.2.2+cu121 torchvision torchmetrics \
        -f https://download.pytorch.org/whl/cu121/torch_stable.html; \
    fi

# tensorflow + keras
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "tensorflow" ] || [ "$BACKEND" = "all" ]; then \
      KERAS_VERSION=$(poetry run pip show keras | awk '/^Version:/ {print $2}') && \
      poetry run pip install --no-cache-dir --extra-index-url https://pypi.nvidia.com tensorflow[and-cuda]==2.15.0 && \
      poetry run pip install --no-cache-dir --upgrade "keras==$KERAS_VERSION" keras-cv; \
    fi

# -----------------------
# 3. Cleanup
# -----------------------
RUN pip uninstall -y poetry && \
    rm -rf $PIP_CACHE_DIR

# -----------------------
# CPU runtime image
# -----------------------
FROM python:3.10-slim-bullseye AS cpu
ENV PATH="/app/.venv/bin:${PATH}"

COPY --from=builder /app/.venv /app/.venv
COPY . /app
WORKDIR /app
CMD ["python","-c","print('CPU image with', '$BACKEND', 'backend')"]

# -----------------------
# GPU runtime image
# -----------------------
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04 AS gpu
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.10 runtime
RUN apt-get update && \
    apt-get install -y --no-install-recommends python3.10 python3-pip && \
    rm -rf /var/lib/apt/lists/*

# Symlinks for consistent "python" and "pip"
RUN ln -s /usr/bin/python3.10 /usr/local/bin/python && \
    ln -s /usr/bin/pip3 /usr/local/bin/pip

ENV PATH="/app/.venv/bin:${PATH}"

COPY --from=builder /app/.venv /app/.venv
COPY . /app
WORKDIR /app
CMD ["python","-c","import sys; print('GPU image with', '$BACKEND', 'backend')"]
