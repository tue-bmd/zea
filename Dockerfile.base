# syntax=docker/dockerfile:1

# -----------------------
# Builder: install deps on slim Python 3.12
# -----------------------
FROM python:3.12-slim-bullseye AS builder
ARG BACKEND=all
ARG GPU=false
ENV PIP_CACHE_DIR=/root/.cache/pip

# 1. System dependencies & Poetry
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      build-essential git curl ca-certificates && \
    pip install --no-cache-dir poetry==1.8.3 && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /ultrasound-toolbox
COPY pyproject.toml poetry.lock ./

# 2. Install project deps into Poetry venv
RUN poetry config virtualenvs.in-project true && \
    poetry install --no-root --without dev && \
    rm -rf $PIP_CACHE_DIR

# 3. Backend-specific installs (numpy as baseline)
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "numpy" ] || [ "$BACKEND" = "all" ]; then \
      ./.venv/bin/pip install --no-cache-dir numpy; \
    fi

# 4. JAX
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "jax" ] || [ "$BACKEND" = "all" ]; then \
      if [ "$GPU" = "true" ]; then \
        ./.venv/bin/pip install --no-cache-dir -U "jax[cuda12]"; \
      else \
        ./.venv/bin/pip install --no-cache-dir -U jax; \
      fi \
    fi  # :contentReference[oaicite:7]{index=7}

# 5. PyTorch
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "torch" ] || [ "$BACKEND" = "all" ]; then \
      if [ "$GPU" = "true" ]; then \
        ./.venv/bin/pip install --no-cache-dir torch torchvision torchaudio \
          --index-url https://download.pytorch.org/whl/cu124; \
      else \
        ./.venv/bin/pip install --no-cache-dir torch torchvision torchaudio \
          --index-url https://download.pytorch.org/whl/cpu; \
      fi \
    fi  # :contentReference[oaicite:8]{index=8}

# 6. TensorFlow
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "tensorflow" ] || [ "$BACKEND" = "all" ]; then \
      if [ "$GPU" = "true" ]; then \
        ./.venv/bin/pip install --no-cache-dir \
          --extra-index-url https://pypi.nvidia.com \
          "tensorflow[and-cuda]==2.19.0"; \
      else \
        ./.venv/bin/pip install --no-cache-dir tensorflow==2.19.0; \
      fi \
    fi  # :contentReference[oaicite:9]{index=9}

# 7. Cleanup build tools and caches
RUN pip uninstall -y poetry && \
    rm -rf $PIP_CACHE_DIR

# -----------------------
# CPU runtime image
# -----------------------
FROM python:3.12-slim-bullseye AS cpu
ARG BACKEND=all
ARG GPU=false
ENV PATH="/ultrasound-toolbox/.venv/bin:${PATH}"
ENV BACKEND=${BACKEND}

# Create a non-root user named actions
RUN useradd -m actions

COPY --from=builder /ultrasound-toolbox/.venv /ultrasound-toolbox/.venv
COPY . /ultrasound-toolbox
WORKDIR /ultrasound-toolbox

# Change ownership to actions
RUN chown -R actions:actions /ultrasound-toolbox /ultrasound-toolbox/.venv

USER actions

CMD python -c "print('CPU image with BACKEND=', '${BACKEND}')"

# -----------------------
# GPU runtime image
# -----------------------
FROM python:3.12-bullseye AS gpu
ARG BACKEND=all
ARG GPU=false
ENV DEBIAN_FRONTEND=noninteractive \
    PATH="/usr/local/cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" \
    BACKEND=${BACKEND}

# Install CUDA runtime libraries and cuDNN (no driver)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/\
cuda-keyring_1.1-1_all.deb -o /tmp/cuda-keyring.deb && \
    dpkg -i /tmp/cuda-keyring.deb && \
    rm /tmp/cuda-keyring.deb && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
      cuda-libraries-12-5 libcudnn9-cuda-12 && \
    rm -rf /var/lib/apt/lists/*

# Copy prebuilt venv and app code
COPY --from=builder /ultrasound-toolbox/.venv /ultrasound-toolbox/.venv
COPY . /ultrasound-toolbox
WORKDIR /ultrasound-toolbox

# Create a non-root user named actions and set ownership
RUN useradd -m actions && chown -R actions:actions /ultrasound-toolbox /ultrasound-toolbox/.venv

USER actions

CMD python -c "import sys; print('GPU image with BACKEND =', '${BACKEND}')"
