# syntax=docker/dockerfile:1

##############################
# Builder: install deps on slim Python 3.12
##############################
FROM python:3.12-slim-bullseye AS builder
ARG BACKEND=all
ARG GPU=false
ARG DEBIAN_FRONTEND=noninteractive

# Prevent Python from writing .pyc files and use C locale
ENV PYTHONDONTWRITEBYTECODE=1
ENV LC_ALL=C

# Poetry and cache settings
ENV POETRY_VERSION=2.1.3 \
    POETRY_VENV=/opt/poetry-venv \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=0 \
    POETRY_VIRTUALENVS_CREATE=0 \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    PIP_CACHE_DIR=/root/.cache/pip
# Ensure poetry venv is on PATH
ENV PATH="${PATH}:${POETRY_VENV}/bin"


# 1. Install system packages and create non-root users (as before)
RUN apt-get update && \
    apt-get install -y --no-install-recommends --fix-missing \
      python3-tk \
      ffmpeg imagemagick \
      make pandoc \
      openssh-client git sudo && \
    python3 -m pip install --no-cache-dir --upgrade pip setuptools && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    for i in $(seq 0 51); do \
      USER_UID=$((1000 + i)); \
      USERNAME="devcontainer$i"; \
      groupadd --gid $USER_UID $USERNAME && \
      useradd --uid $USER_UID --gid $USER_UID -m --shell /bin/bash $USERNAME && \
      echo "$USERNAME ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/$USERNAME && \
      chmod 0440 /etc/sudoers.d/$USERNAME && \
      echo "export PATH=\$PATH:/home/$USERNAME/.local/bin" >> /home/$USERNAME/.bashrc; \
    done

# 2. Create a dedicated virtualenv for Poetry
RUN python3 -m venv $POETRY_VENV \
 && $POETRY_VENV/bin/pip install --no-cache-dir poetry==${POETRY_VERSION}
ENV PATH="${PATH}:${POETRY_VENV}/bin"

WORKDIR /ultrasound-toolbox
COPY pyproject.toml poetry.lock ./

# 3. Install all dependencies
RUN --mount=type=cache,target=$POETRY_CACHE_DIR \
  if [ "$BACKEND" = "all" ]; then \
    # Only install full dev stack if "all" backend is requested
    poetry install --no-root --compile -E dev; \
  else \
    # Keep individual backend installations lightweight
    poetry install --no-root --compile; \
  fi

# 4. Always install numpy
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    pip install --no-cache-dir numpy

# 5. JAX (if requested) 0.6.0 latest compatible version
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "jax" ] || [ "$BACKEND" = "all" ]; then \
      if [ "$GPU" = "true" ]; then \
        pip install --no-cache-dir -U "jax[cuda12]==0.6.0"; \
      else \
        pip install --no-cache-dir -U jax; \
      fi; \
    fi

# 6. PyTorch (if requested)
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "torch" ] || [ "$BACKEND" = "all" ]; then \
      if [ "$GPU" = "true" ]; then \
        pip install --no-cache-dir \
          torch==2.6.0+cu124 torchvision==0.21.0+cu124 torchaudio==2.6.0+cu124 \
          --index-url https://download.pytorch.org/whl/cu124; \
      else \
        pip install --no-cache-dir \
          torch==2.6.0+cpu torchvision==0.21.0+cpu torchaudio==2.6.0+cpu \
          --index-url https://download.pytorch.org/whl/cpu; \
      fi; \
    fi

# 7. TensorFlow (if requested)
RUN --mount=type=cache,target=$PIP_CACHE_DIR \
    if [ "$BACKEND" = "tensorflow" ] || [ "$BACKEND" = "all" ]; then \
      if [ "$GPU" = "true" ]; then \
        pip install --no-cache-dir \
          --extra-index-url https://pypi.nvidia.com \
          "tensorflow[and-cuda]==2.19.0"; \
      else \
        pip install --no-cache-dir tensorflow==2.19.0; \
      fi; \
    fi


##############################
# CPU runtime image
##############################
FROM builder AS cpu
ARG BACKEND=all
ENV BACKEND=${BACKEND}

CMD ["/bin/bash", "-c", "echo \"CPU image ready → BACKEND=${BACKEND}\"; exec /bin/bash"]

##############################
# GPU runtime image
##############################
FROM builder AS gpu
ARG BACKEND=all
ARG GPU=false

# Add CUDA paths
ENV PATH="/usr/local/cuda/bin:${PATH}" \
    BACKEND=${BACKEND}

# Install CUDA runtime libraries
RUN apt-get update && \
    apt-get install -y --no-install-recommends gnupg2 curl && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.1-1_all.deb \
      -o /tmp/cuda-keyring.deb && \
    dpkg -i /tmp/cuda-keyring.deb && \
    rm /tmp/cuda-keyring.deb && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
      cuda-libraries-12-5 libcudnn9-cuda-12 && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /ultrasound-toolbox
CMD ["/bin/bash", "-c", "echo \"GPU image ready → BACKEND=${BACKEND}\"; exec /bin/bash"]
