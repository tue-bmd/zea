# Multi-stage base image for usbmd

# --- Stage 0: System dependencies ---
FROM ubuntu:22.04 as system-deps

ARG DEBIAN_FRONTEND=noninteractive
ARG BASE_UID=1000
ARG NUM_USERS=51

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 python3-pip git python3-tk python3-venv \
        libsm6 libxext6 libxrender-dev libqt5gui5 sudo \
        ffmpeg imagemagick make openssh-client && \
    python3 -m pip install --no-cache-dir --upgrade pip setuptools && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    for i in $(seq 0 $NUM_USERS); do \
        USER_UID=$((BASE_UID + i)); \
        USERNAME="devcontainer$i"; \
        groupadd --gid $USER_UID $USERNAME && \
        useradd --uid $USER_UID --gid $USER_UID -m --shell /bin/bash $USERNAME && \
        echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME; \
        echo "export PATH=\$PATH:/home/$USERNAME/.local/bin" >> /home/$USERNAME/.bashrc; \
    done

# --- Stage 1: Build dependencies and install Python packages ---
FROM system-deps as builder

ENV PYTHONDONTWRITEBYTECODE=1
ENV LC_ALL=C
ENV PIP_CACHE_DIR=/tmp/pip_cache
ENV POETRY_VERSION=1.8.3 \
    POETRY_VENV=/opt/poetry-venv \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=0 \
    POETRY_VIRTUALENVS_CREATE=0 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

WORKDIR /ultrasound-toolbox
COPY pyproject.toml poetry.lock ./

# --- Backend selection ---
ARG BACKEND=all
ARG CPU_ONLY=0

# Install dependencies for usbmd (with headless opencv)
RUN --mount=type=cache,target=$POETRY_CACHE_DIR \
    poetry install -E opencv-python-headless --no-root --compile

# --- Backend-specific installs ---
# TensorFlow
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "tensorflow" ] && [ "$CPU_ONLY" = "1" ]; then \
    pip install tensorflow==2.15.0 keras keras-cv; \
    fi
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "tensorflow" ] && [ "$CPU_ONLY" != "1" ]; then \
    KERAS_VERSION=$(pip show keras | grep '^Version:' | awk '{print $2}') && \
    pip install --extra-index-url https://pypi.nvidia.com tensorflow[and-cuda]==2.15.0 && \
    pip install --upgrade "keras==$KERAS_VERSION" keras-cv; \
    fi

# JAX
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "jax" ] && [ "$CPU_ONLY" = "1" ]; then \
    pip install jax==0.4.26; \
    fi
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "jax" ] && [ "$CPU_ONLY" != "1" ]; then \
    pip install --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html jax[cuda12_pip]==0.4.26; \
    fi

# Torch
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "torch" ] && [ "$CPU_ONLY" = "1" ]; then \
    pip install torch==2.2.2 torchvision torchmetrics; \
    fi
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "torch" ] && [ "$CPU_ONLY" != "1" ]; then \
    pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.2.2+cu121 torchvision torchmetrics; \
    fi

# All backends
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "all" ] && [ "$CPU_ONLY" = "1" ]; then \
    pip install tensorflow==2.15.0 keras keras-cv && \
    pip install jax==0.4.26 && \
    pip install torch==2.2.2 torchvision torchmetrics; \
    fi
RUN --mount=type=cache,target=$PIP_CACHE_DIR if [ "$BACKEND" = "all" ] && [ "$CPU_ONLY" != "1" ]; then \
    KERAS_VERSION=$(pip show keras | grep '^Version:' | awk '{print $2}') && \
    pip install --extra-index-url https://pypi.nvidia.com tensorflow[and-cuda]==2.15.0 && \
    pip install --upgrade "keras==$KERAS_VERSION" keras-cv && \
    pip install --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html jax[cuda12_pip]==0.4.26 && \
    pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.2.2+cu121 torchvision torchmetrics; \
    fi

# --- Stage 2: Final image, copy only what is needed ---
FROM system-deps

ENV PYTHONDONTWRITEBYTECODE=1
ENV LC_ALL=C

WORKDIR /ultrasound-toolbox

# Copy only installed site-packages and lock files from builder
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /ultrasound-toolbox/pyproject.toml /ultrasound-toolbox/poetry.lock ./